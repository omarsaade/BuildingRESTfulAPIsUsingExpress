const EventEmitter = require('events');

const emitter = new EventEmitter();

event emitter : Raise Event emitter.emit()

Event listener
emitter.on()
addListener , on

===========================

const http = require('http');

const server = http.createServer();
//server hye event Emitter

yaane fina n2ul  
server.emit()..
server.on()..
server.addListener()..
===================================

bel nodejs eljdid tagyaret tari2et hat el
eventListener...
lah na3mul pass ka parameter lal osas de5el
el createServer() badal ma nhet
server.on()...

so

const server = http.createServer((req,res)=>{
if(req.url==="/"){
res.write("hello");
res.end();
}
if(req.url==="/api/courses"){
res.write(JSON.stringify([1,2,3));
res.end();
}
}) 

server.listen(3000);

====================================

we will not use this http module to build a backend service
for our application.

we will use the express framework.

====================================================



      Restful Services also called : Restful APIs

      app or client       needs to talk to       sever or backend
                              to get or save the data

        this communication happened using the http protocol.


        REST : Representational State Transfer


http://vidly.com/api/customers
       d o main conv   collection of customers in our application    
so client can send an http request to this endpoint to talk to our service


HTTP METHODS    

         GET
         POST 
         PUT : UPDATING data
         DELETE: DELETING DATA

-----------------------------------------------------
                           SO YOU WILL LEARN HOW to USE THE express framework TO build
                           A Restful service FOR MANAGING THE LIST OF customers

bUILD HHTP SERVICES.

==================================================================

nodemon is used for watching 24/24

ex: node index.js

the best for watching:  
firstly. we want to install a node package called nodemon

  npm i -g nodemon

  now we use nodemon index.js


//change PORT                 hasab esem el file w na2e el port li badak yeh
  SET PORT=5000 && node index.js

aw

SET PORT=5000 && nodemonÂ index.js


------------------------

const express = require("express");
//create our express application
const app = express();

//callback: this is the function that will be called
//when we have an HTTP GET req to this endpoint.
//callback Fn also called Route Handler
app.get("/", (req, res) => {
  res.send("Hello World!!!");
});

app.get("/api/courses", (req, res) => {
  res.send([1, 2, 3]);
});

// /api/courses/1

// app.get("/api/courses/:id", (req, res) => {
//   res.send(req.params.id);
// });

app.get("/api/posts/:year/:month", (req, res) => {
  // res.send(req.params);
  // res.send(req.params.year);
  //send to client
  res.send(req.query);
});

//PORT
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});



======================================================

req params object li byerja3 bel page


{
year: "2020",
month: "3"
}


their names are based on routes parameters (year/month)


routes parameters    /api/posts

queryString parameters    ?sortBy=name

                router parameters     optional parameter
localhost:3000  /api/posts/2018/1       ?sortBy=name



app.get("/api/posts/:year/:month", (req, res) => {
  res.send(req.query);

});


http://localhost:3000/api/posts/2020/3?sortBy=name


result on page     
{
sortBy: "name"
}


code:

const express = require("express");
//create our express application
const app = express();

//callback: this is the function that will be called
//when we have an HTTP GET req to this endpoint.
//callback Fn also called Route Handler
app.get("/", (req, res) => {
  res.send("Hello World!!!");
});

// app.get("/api/courses", (req, res) => {
// res.send([1, 2, 3]);
// });

// /api/courses/1

app.get("/api/courses/:id", (req, res) => {
  res.send(req.params.id);
});

app.get("/api/posts/:year/:month", (req, res) => {
  // res.send(req.params);
  // res.send(req.params.year);
  //send to client
  // console.log(req.query);
  // res.send(req.params);
  res.send(req.query);
});

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});






===============================================








Handling get request



const express = require("express");
const app = express();

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/", (req, res) => {
  res.send("Hello World!!!");
});

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.get("/api/courses/:id", (req, res) => {
  // cz req.params.id return string
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    res.status(404).send("The Course with the given ID was not found.");
  res.send(course);
});

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});








============================================================


Handling POST requests


   create A NEW Course

 In this route handler we need to read the course object
 that should be in the body of the request , and uses properties
 to create a new course object and that add that course object 
 to our courses array.

req.body.name
 we need to read this from the body of the request
 so i am assuming that in the request body we have an object
 and that object has a name property.
yaane ne7na bel request body fi 3ana object w hayde el object
3anda name property.



 
 req.body.name   //
for this line to work we need to unable parsing of json object
in the body of the request.cz by default this feature is not enabled
by express.






const express = require("express");
const app = express();

app.use(express.json());

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

// app.get("/", (req, res) => {
// res.send("Hello World!!!");
// });

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});
f;

// app.get("/api/courses/:id", (req, res) => {
// cz req.params.id return string
// const course = courses.find((c) => c.id === parseInt(req.params.id));
// if (!course)
// res.status(404).send("The Course with the given ID was not found.");
// res.send(course);
// });

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});






=========================================================


                           Postman
to call http services we use a chrome extension called Postman
so we need to install postman.

search:
chrome postman

now with postman we can create an http request and we can test
http services.

===============================================












Input Validation

search for

  npm joi

npm i joi




//samayneha Joi bi ahref awal kbir li2ana btarje3 class.
const Joi = require("joi");
const express = require("express");
const app = express();

app.use(express.json());

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  const result = Joi.validate(req.body, schema);
  console.log(result);

  if (result.error) {
    //400 Bad request
    res.status(400).send(result.error.details[0].message);
    return;
  }

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});















=========================================================
                          Handling http  PUT req

//samayneha Joi bi ahref awal kbir li2ana btarje3 class.
const Joi = require("joi");
const express = require("express");
const app = express();

app.use(express.json());

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) {
    //400 Bad request
    res.status(400).send(result.error.details[0].message);
    return;
  }

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});

//                      Update the course
app.put("/api/courses/:id", (req, res) => {
  //look up the course
  //if not existing, return 404
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    res.status(404).send("The Course with the given ID was not found.");

  //Validate
  //If invalid, return 400- Bad request
  // const result = validateCourse(req.body);

  const { error } = validateCourse(req.body);

  // if (result.error) {
  //   //400 Bad request
  //   res.status(400).send(result.error.details[0].message);
  //   return;
  // }
  // console.log(req.body);
  if (error) {
    //400 Bad request
    res.status(400).send(result.error.details[0].message);
    return;
  }

  //Update Course
  course.name = req.body.name;
  //Return the updated course
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}



=======================================================================














                            Handling Delete requests
CRUD
create
read 
update
deleteeeeeeeeeeee






//samayneha Joi bi ahref awal kbir li2ana btarje3 class.
const Joi = require("joi");
const express = require("express");
const app = express();

app.use(express.json());

let courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

//PORT
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});

//                      Update the course
app.put("/api/courses/:id", (req, res) => {
  //look up the course
  //if not existing, return 404
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");
  //MAMNU3 YKAMEL IZA MAFI RES

  //Validate
  //If invalid, return 400- Bad request
  // const result = validateCourse(req.body);

  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  //Update Course
  course.name = req.body.name;
  //Return the updated course
  res.send(course);
});

///////////////////

app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");
  /*
  let filtered = courses.filter((e) => {
    return e.id !== parseInt(req.params.id);
  });

  // console.log(filtered);
  courses = filtered;

  or second meth
  */

  let index = courses.indexOf(course);
  courses.splice(index, 1);
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}

app.get("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found");
  res.send(course);
});


