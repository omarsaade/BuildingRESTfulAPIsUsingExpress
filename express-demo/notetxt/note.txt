A middleware function :

A middleware function is a function that takes a req object 
add returns a response to the client or pases 
control to another middleware function.

express.json();
express.raw();
express.Router();
express.static();


                     Methods


                            express.json([options])



This middleware is available in Express v4.16.0 onwards.

The JSON.parse() method converts a JSON value to a javascript object

This is a built-in middleware function in Express. It parses incoming requests with
 JSON payloads and is based on body-parser.
Returns middleware that only parses JSON and only looks at requests where
 the Content-Type header matches the type option. 

A new body object containing the parsed data is populated on the request object after the 
middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, 
the Content-Type was not matched, or an error occurred.


 app.use() : we call this method to Install a middleware function in our request processing pipeline



 ===========================


app.js

 const Joi = require("joi");
const logger = require("./logger");
const express = require("express");
const app = express();

//here we adding a json middleware function
app.use(express.json());

//Building Custom Middleware Function
app.use(function (req, res, next) {
  console.log("Logging...");
  next();
});
//Building Custom Middleware Function and importing from outside
app.use(logger);

let courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});

app.put("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  course.name = req.body.name;

  res.send(course);
});

app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  let index = courses.indexOf(course);
  courses.splice(index, 1);
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}

app.get("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found");
  res.send(course);
});





logger.js

//Building Custom Middleware Function

function log(req, res, next) {
  console.log("Authenticating...");
  next();
}

module.exports = log;


================================================


form = urlencoded
//form : urlencoded
// or
//json :json
// ana hon btejine data mshafra...so lezem y7awela la data 3adye
//yaane bado yfek el tashfir men 5ilel library ,
// awal maktabe esma query string w hye built in bel node js
//  // const q = require('querystring'); w tene maktabse esma qs
// iza imet el extended hye true , yaane enta 3am t2elo lal body
// sta3mel el qs..hye shi mawjud 3al npm
//law false yaane sta5dam querystring
//extended lal tashfir iza qs() het true
// true...cz qs is more safer
//hye by default true
const bodyParserMW = bodyParser.urlencoded({ extended: true });
//or
// const bodyParserMW = express.urlencoded({ extended: true });

// hayda el middleware lah yetnafaz lama yeje post request
// npm install --save body-parser


=============================================



Third party middleware
const morgan = require("morgan");
const helmet = require("helmet");
app.use(helmet());
app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms



==============================================================================





                              Environments


               Production env     or    development env
Whereas a development environment may contain several different versions
 of a product or update being worked on and tested, a production environment
  contains just the final version of the
 product in order to avoid any confusion or security vulnerabilities.

What's the difference? The development environment is your local computer
, while the production environment is the live product
 customers or visitors might interact with.

 
 Logging yaane console.log()  tibe3a bel console




    console.log(`NODE_ENV: ${process.env.NODE_ENV}`);


     console.log(`app: ${app.get("env")}`);

 
if (app.get("env") === "development") {
  app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms
}



how to set environment to production ?

 

On Windows: $env:NODE_ENV = 'production'





 ======================================================================

Storing configuration settings for the application
              and override them for each environment.


                     Manage configuration


              npm rc

but there is a better one

npm i config                //Install this one
 It lets you define a set of default parameters, and extend them for different deployment
 environments (development, qa, staging, production, etc.).


for saving password in the environment

   $env:app_password=12345


===============================================================











code 




const config = require("config");
const morgan = require("morgan");
const helmet = require("helmet");
const Joi = require("joi");
const logger = require("./logger");
const auth = require("./auth");
const express = require("express");
const app = express();

/*

process.env.NODE_ENV; // undefined
console.log(`NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`app: ${app.get("env")}`);




*/
//here we adding a json middleware function

app.use(express.json()); //req.body
app.use(express.urlencoded({ extended: true })); //key=value&key=value
app.use(express.static("public"));
app.use(helmet());

//Configuation
console.log("Application Name: " + config.get("name"));
console.log("Mail Server: " + config.get("mail.host"));
console.log("Mail Password: " + config.get("mail.password"));

if (app.get("env") === "development") {
  app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms
  console.log("Morgan enabled...");
}

// app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms

//Building Custom Middleware Function
app.use(function (req, res, next) {
  console.log("Logging...");
  next();
});
//Building Custom Middleware Function and importing from outside
app.use(logger);

app.use(auth);

let courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});

app.put("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  course.name = req.body.name;

  res.send(course);
});

app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  let index = courses.indexOf(course);
  courses.splice(index, 1);
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}

app.get("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found");
  res.send(course);
});















================================================================================

  
DEBUG MODUle
                          


we use the debug package(fn) instead os using console.log()
all time

                    Debbuging

                    npm i debug
     set DEBUG=app:startup

     set DEBUG=app:startup,app:db

     set DEBUG=app:*

    set DEBUG=app:startup,app:db nodemon index.js

                       $env:DEBUG=app:startup 
                      


app.js


const startupDebugger = require("debug")("app:startup");
const dbDebbuger = require("debug")("app:db");
const morgan = require("morgan");
const express = require("express");
const app = express();

if (app.get("env") === "development") {
  app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms
  startupDebugger("Morgan enabled...");

  //   console.log("Morgan enabled...");
}

//Db work...
dbDebbuger("Connected to the database...");

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));



or


we can put one name for one thing


const debug = require("debug")("app:startup");

const morgan = require("morgan");
const express = require("express");
const app = express();

if (app.get("env") === "development") {
  app.use(morgan("tiny")); //GET /api/courses 200 79 - 4.861 ms
  //its better the using console.log()  more color , no need to delete ....
  debug("Morgan enabled...");

 
}

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));





================================================================================================


