A middleware function :

A middleware function is a function that takes a req object 
add returns a response to the client or pases 
control to another middleware function.

express.json();
express.raw();
express.Router();
express.static();


                     Methods


                            express.json([options])



This middleware is available in Express v4.16.0 onwards.

The JSON.parse() method converts a JSON value to a javascript object

This is a built-in middleware function in Express. It parses incoming requests with
 JSON payloads and is based on body-parser.
Returns middleware that only parses JSON and only looks at requests where
 the Content-Type header matches the type option. 

A new body object containing the parsed data is populated on the request object after the 
middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, 
the Content-Type was not matched, or an error occurred.


 app.use() : we call this method to Install a middleware function in our request processing pipeline



 ===========================


app.js

 const Joi = require("joi");
const logger = require("./logger");
const express = require("express");
const app = express();

//here we adding a json middleware function
app.use(express.json());

//Building Custom Middleware Function
app.use(function (req, res, next) {
  console.log("Logging...");
  next();
});
//Building Custom Middleware Function and importing from outside
app.use(logger);

let courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.post("/api/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Listening on port ${port}....`);
});

app.put("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(result.error.details[0].message);

  course.name = req.body.name;

  res.send(course);
});

app.delete("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The Course with the given ID was not found.");

  let index = courses.indexOf(course);
  courses.splice(index, 1);
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}

app.get("/api/courses/:id", (req, res) => {
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found");
  res.send(course);
});





logger.js

//Building Custom Middleware Function

function log(req, res, next) {
  console.log("Authenticating...");
  next();
}

module.exports = log;


================================================


